{"version":3,"sources":["components/SettingsModal/Settings.module.css","components/InfoModal/Info.module.css","components/SettingsBtn/SettingsBtn.module.css","components/Timer/Timer.module.css","audio/bell.flac","components/InfoBtn/InfoBtn.module.css","components/TimerDisplay/index.jsx","components/SettingsBtn/index.jsx","components/SettingsModal/index.jsx","components/InfoBtn/index.jsx","components/InfoModal/index.jsx","components/Timer/index.jsx","store/action.js","App.js","serviceWorker.js","store/reducer.js","index.js"],"names":["module","exports","TimeDisplay","props","circumference","normalizedRadius","Math","PI","strokeDashoffset","progress","className","width","viewBox","radius","stroke","fill","strokeWidth","r","cx","cy","strokeDasharray","style","children","SettingsBtn","onClick","onclick","css","btn","fontSize","Settings","title","active","onChange","backdrop","modal","content","InfoBtn","Info","Timer","state","useSelector","dispatch","useDispatch","useEffect","localStorage","setItem","JSON","stringify","useState","workTime","pomodoroInterval","setPomodoroInterval","shortBreak","shortBrake","setShortBrake","longBreak","longBrake","setLongBreak","pomodoros","setPomodoros","autoPlay","setAutoPlay","Audio","bellSound","bell","time","setTime","pomodoro","setPomodoro","restFlag","setRestFlag","buttonText","setButtonText","startStatus","setStartStatus","settings","setSettings","info","setInfo","temporary","setTemporary","setTimeout","play","interval","flag","pomodoroCount","Swal","fire","allowOutsideClick","onOpen","onClose","blueBg","allowEnterKey","confirmButtonColor","redBg","minutes","floor","seconds","onModal","onInfo","document","body","classList","remove","add","total","getProgress","test","Button","size","variant","console","log","TextField","id","type","fullWidth","value","e","target","FormControlLabel","control","Checkbox","checked","label","color","obj","App","Boolean","window","location","hostname","match","localPomodorState","parse","getItem","initialState","store","createStore","action","parseInt","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dcb5d606.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"Settings_backdrop__3m9IM\",\"modal\":\"Settings_modal__NKSlT\",\"title\":\"Settings_title__2prBJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"Info_backdrop__1pnvi\",\"modal\":\"Info_modal__3G71r\",\"title\":\"Info_title__3aE8C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"SettingsBtn_btn__68Ofv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"test\":\"Timer_test__33JCf\"};","module.exports = __webpack_public_path__ + \"static/media/bell.525320df.flac\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"InfoBtn_btn__3NZLi\",\"icon\":\"InfoBtn_icon__1WMUV\"};","import React from 'react';\r\nimport './TimerDisplay.css';\r\n\r\nconst TimeDisplay = (props) => {\r\n    const radius = 150;\r\n    const stroke = 5;\r\n    const normalizedRadius = radius - stroke * 2;\r\n    const circumference = normalizedRadius * 2 * Math.PI;\r\n    const strokeDashoffset = circumference - (props.progress / 100) * circumference;\r\n\r\n    return (\r\n        <div className=\"TimeDisplay\">\r\n            <svg width=\"100%\" viewBox={`0 0 ${radius * 2} ${radius * 2}`}>\r\n                <circle\r\n                    stroke=\"#ddd\"\r\n                    fill=\"#fff\"\r\n                    strokeWidth={stroke}\r\n                    r={normalizedRadius}\r\n                    cx={radius}\r\n                    cy={radius}\r\n                />\r\n                <circle\r\n                    stroke=\"#D9534F\"\r\n                    fill=\"transparent\"\r\n                    strokeWidth={stroke}\r\n                    strokeDasharray={circumference + ' ' + circumference}\r\n                    style={{ strokeDashoffset }}\r\n                    r={normalizedRadius}\r\n                    cx={radius}\r\n                    cy={radius}\r\n                />\r\n            </svg>\r\n            <div>\r\n                {props.children}\r\n                <p>Pomodoro Technique</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TimeDisplay;\r\n","import React from 'react';\r\nimport css from './SettingsBtn.module.css';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\n\r\nconst SettingsBtn = (props) => {\r\n    return (\r\n        <button onClick={props.onclick} className={css.btn}>\r\n            <SettingsIcon fontSize=\"large\"/>\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default SettingsBtn;","import React from 'react';\r\nimport css from './Settings.module.css';\r\n\r\nfunction Settings({ title, active, children, onChange }) {\r\n  if (!active) {\r\n    return null;\r\n  }\r\n  return (\r\n    <div className={css.backdrop} >\r\n      <div className={css.modal}>\r\n        {title && <h2 className={css.title}>{title}</h2>}\r\n        <div className={css.content}>{children}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Settings;\r\n","import React from 'react';\r\nimport css from './InfoBtn.module.css';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\n\r\nconst InfoBtn = (props) => {\r\n    return (\r\n        <button onClick={props.onclick} className={css.btn}>\r\n            <InfoIcon fontSize=\"large\"/>\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default InfoBtn;","import React from 'react';\r\nimport css from './Info.module.css';\r\n\r\nfunction Info({ title, active, children, onChange }) {\r\n  if (!active) {\r\n    return null;\r\n  }\r\n  return (\r\n    <div className={css.backdrop} >\r\n      <div className={css.modal}>\r\n        {title && <h2 className={css.title}>{title}</h2>}\r\n        <div className={css.content}>{children}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Info;\r\n","import React, { useState, useEffect } from 'react'\r\nimport TimerDisplay from '../TimerDisplay'\r\nimport SettingsBtn from '../SettingsBtn'\r\nimport Settings from '../SettingsModal'\r\nimport css from './Timer.module.css'\r\nimport bellSound from '../../audio/bell.flac'\r\nimport Swal from 'sweetalert2'\r\nimport InfoBtn from '../InfoBtn'\r\nimport Info from '../InfoModal'\r\nimport { Button, FormControlLabel, Checkbox } from '@material-ui/core'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { change_state } from '../../store/action'\r\n\r\nfunction Timer() {\r\n\r\n\tconst state = useSelector((state) => state)\r\n\tconst dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('pomodorState', JSON.stringify(state))\r\n  },[state])\r\n\r\n\t// Here are time value hooks\r\n\tconst [pomodoroInterval, setPomodoroInterval] = useState(state.workTime)\r\n\tconst [shortBrake, setShortBrake] = useState(state.shortBreak)\r\n\tconst [longBrake, setLongBreak] = useState(state.longBreak)\r\n\tconst [pomodoros, setPomodoros] = useState(state.pomodoros)\r\n\tconst [autoPlay, setAutoPlay] = useState(true)\r\n\r\n\t// Hooks for sounds\r\n\tconst [bell] = useState(new Audio(bellSound))\r\n\r\n\t// Other hooks\r\n\tconst [time, setTime] = useState(pomodoroInterval * 60)\r\n\tconst [pomodoro, setPomodoro] = useState(1)\r\n\tconst [restFlag, setRestFlag] = useState(false)\r\n\tconst [buttonText, setButtonText] = useState('Pause')\r\n\tconst [startStatus, setStartStatus] = useState(false)\r\n\r\n\t// Hooks for Modals\r\n\tconst [settings, setSettings] = useState(false)\r\n\tconst [info, setInfo] = useState(false)\r\n\r\n\t// Here is a temporary value for progress bar\r\n\tconst [temporary, setTemporary] = useState(pomodoroInterval)\r\n\r\n\tuseEffect(() => {\r\n\t\tif (startStatus) {\r\n\t\t\tif (buttonText === 'Pause') {\r\n\t\t\t\tif (time !== 0) {\r\n\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\tsetTime(time - 1)\r\n\t\t\t\t\t}, 1000)\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbell.play()\r\n\t\t\t\t\tpomodoroCount()\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t})\r\n\r\n\tconst start = () => {\r\n\t\tconsole.log('test')\r\n\t\tsetStartStatus(true)\r\n\t}\r\n\r\n\tconst minutes = Math.floor(time / 60)\r\n\tconst seconds = time - minutes * 60\r\n\r\n\tfunction pomodoroCount() {\r\n\t\tlet pomodoroCount = pomodoro\r\n\t\tlet interval\r\n\t\tlet flag\r\n\t\tif (pomodoro < pomodoros && !restFlag) {\r\n\t\t\tinterval = shortBrake\r\n\t\t\tflag = true\r\n\t\t\tsetTemporary(shortBrake)\r\n\r\n\t\t\tautoPlay === true &&\r\n\t\t\t\tSwal.fire({\r\n\t\t\t\t\ttitle: 'Time to have a rest',\r\n\t\t\t\t\tallowOutsideClick: false,\r\n\t\t\t\t\tonOpen: () => {\r\n\t\t\t\t\t\tsetButtonText('Continue')\r\n\t\t\t\t\t},\r\n\t\t\t\t\tonClose: () => {\r\n\t\t\t\t\t\tsetButtonText('Pause')\r\n\t\t\t\t\t\tblueBg()\r\n\t\t\t\t\t},\r\n\t\t\t\t\tallowEnterKey: true,\r\n\t\t\t\t\tconfirmButtonColor: 'red',\r\n\t\t\t\t})\r\n\t\t} else if (pomodoro < pomodoros && restFlag) {\r\n\t\t\tpomodoroCount = pomodoro + 1\r\n\t\t\tinterval = pomodoroInterval\r\n\t\t\tflag = false\r\n\t\t\tsetTemporary(pomodoroInterval)\r\n\r\n\t\t\tautoPlay === true &&\r\n\t\t\t\tSwal.fire({\r\n\t\t\t\t\ttitle: 'Time to work',\r\n\t\t\t\t\tallowOutsideClick: false,\r\n\t\t\t\t\tonOpen: () => {\r\n\t\t\t\t\t\tsetButtonText('Continue')\r\n\t\t\t\t\t},\r\n\t\t\t\t\tonClose: () => {\r\n\t\t\t\t\t\tsetButtonText('Pause')\r\n\t\t\t\t\t\tredBg()\r\n\t\t\t\t\t},\r\n\t\t\t\t\tallowEnterKey: true,\r\n\t\t\t\t\tconfirmButtonColor: 'blue',\r\n\t\t\t\t})\r\n\t\t} else if (pomodoro >= pomodoros) {\r\n\t\t\tpomodoroCount = 1\r\n\t\t\tinterval = longBrake\r\n\t\t\tflag = true\r\n\t\t\tsetTemporary(longBrake)\r\n\t\t\tblueBg()\r\n\r\n\t\t\tautoPlay === true &&\r\n\t\t\t\tSwal.fire({\r\n\t\t\t\t\ttitle: 'Time to have the longest break',\r\n\t\t\t\t\tallowOutsideClick: false,\r\n\t\t\t\t\tonOpen: () => {\r\n\t\t\t\t\t\tsetButtonText('Continue')\r\n\t\t\t\t\t},\r\n\t\t\t\t\tonClose: () => {\r\n\t\t\t\t\t\tsetButtonText('Pause')\r\n\t\t\t\t\t},\r\n\t\t\t\t\tallowEnterKey: true,\r\n\t\t\t\t\tconfirmButtonColor: 'red',\r\n\t\t\t\t})\r\n\t\t}\r\n\t\tsetPomodoro(pomodoroCount)\r\n\t\tsetTime(interval * 60)\r\n\t\tsetRestFlag(flag)\r\n\t}\r\n\r\n\tfunction pauseAndResume() {\r\n\t\tlet newText\r\n\t\tif (buttonText === 'Pause') {\r\n\t\t\tnewText = 'Continue'\r\n\t\t} else {\r\n\t\t\tnewText = 'Pause'\r\n\t\t}\r\n\t\tsetButtonText(newText)\r\n\t}\r\n\r\n\t// Func for progress bar\r\n\tconst getProgress = () => {\r\n\t\tconst current = time\r\n\t\tconst total = temporary * 60\r\n\t\treturn ((total - current) / total) * 100\r\n\t}\r\n\r\n\tconst onModal = () => {\r\n\t\treturn setSettings(true)\r\n\t}\r\n\r\n\tconst onInfo = () => {\r\n\t\treturn setInfo(true)\r\n\t}\r\n\r\n\tconst onCheckBox = () => {\r\n\t\treturn setAutoPlay(!autoPlay)\r\n\t}\r\n\r\n\tconst reset = () => {\r\n\t\tif (buttonText === 'Continue') {\r\n\t\t\tsetStartStatus(false)\r\n\t\t\tsetRestFlag(false)\r\n\t\t\tsetTime(temporary * 60)\r\n\t\t\tsetButtonText('Pause')\r\n\t\t}\r\n\t}\r\n\r\n\t// Func for changing bg Color while a break\r\n\tconst blueBg = () => {\r\n\t\tdocument.body.classList.remove('restout')\r\n\t\tdocument.body.classList.add('workout')\r\n\t}\r\n\r\n\tconst redBg = () => {\r\n\t\tdocument.body.classList.remove('workout')\r\n\t\tdocument.body.classList.add('restout')\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<InfoBtn onclick={onInfo} />\r\n\t\t\t<SettingsBtn onclick={onModal} />\r\n\r\n\t\t\t<TimerDisplay time={pomodoroInterval} progress={getProgress()}>\r\n\t\t\t\t<h2 className={css.test}>\r\n\t\t\t\t\t{minutes < 10 ? `0${minutes}` : minutes} :{' '}\r\n\t\t\t\t\t{seconds < 10 ? `0${seconds}` : seconds}\r\n\t\t\t\t</h2>\r\n\t\t\t</TimerDisplay>\r\n\t\t\t<br />\r\n\r\n\t\t\t{startStatus ? (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\tsize='large'\r\n\t\t\t\t\t\tvariant='outlined'\r\n\t\t\t\t\t\tonClick={pauseAndResume}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{buttonText}\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\tsize='large'\r\n\t\t\t\t\t\ttitle='Click <Pause> to reset'\r\n\t\t\t\t\t\tonClick={reset}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tReset\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</div>\r\n\t\t\t) : (\r\n\t\t\t\t<Button variant='outlined' onClick={start} size='large'>\r\n\t\t\t\t\tStart\r\n\t\t\t\t</Button>\r\n\t\t\t)}\r\n\r\n\t\t\t<Settings active={settings} onChange={onModal}>\r\n\t\t\t\t<h3>Settings</h3>\r\n\t\t\t\t<div>Pomodoro</div>\r\n\t\t\t\t<TextField\r\n\t\t\t\t\tid='standard-basic'\r\n\t\t\t\t\tvariant='outlined'\r\n\t\t\t\t\ttype='number'\r\n\t\t\t\t\tfullWidth\r\n\t\t\t\t\tvalue={pomodoroInterval}\r\n\t\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\t\tsetPomodoroInterval(e.target.value)\r\n\t\t\t\t\t\tsetTime(e.target.value * 60)\r\n\t\t\t\t\t\tsetTemporary(e.target.value)\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<div>Short Break</div>\r\n\t\t\t\t<TextField\r\n\t\t\t\t\tid='standard-basic'\r\n\t\t\t\t\tvariant='outlined'\r\n\t\t\t\t\tfullWidth\r\n\t\t\t\t\tvalue={shortBrake}\r\n\t\t\t\t\tonChange={(e) => setShortBrake(e.target.value)}\r\n\t\t\t\t\ttype='number'\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<div>Long Break</div>\r\n\t\t\t\t<TextField\r\n\t\t\t\t\tid='standard-basic'\r\n\t\t\t\t\tvariant='outlined'\r\n\t\t\t\t\tfullWidth\r\n\t\t\t\t\tvalue={longBrake}\r\n\t\t\t\t\tonChange={(e) => setLongBreak(e.target.value)}\r\n\t\t\t\t\ttype='number'\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<div>Pomodoro Count</div>\r\n\t\t\t\t<TextField\r\n\t\t\t\t\tid='standard-basic'\r\n\t\t\t\t\tvariant='outlined'\r\n\t\t\t\t\tfullWidth\r\n\t\t\t\t\tvalue={pomodoros}\r\n\t\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\t\tsetPomodoros(e.target.value)\r\n\t\t\t\t\t\tconsole.log('count')\r\n\t\t\t\t\t}}\r\n\t\t\t\t\ttype='number'\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<FormControlLabel\r\n\t\t\t\t\tcontrol={\r\n\t\t\t\t\t\t<Checkbox\r\n\t\t\t\t\t\t\tchecked={autoPlay}\r\n\t\t\t\t\t\t\tonChange={onCheckBox}\r\n\t\t\t\t\t\t\tvalue='checkedA'\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlabel='Auto Play without push notifications'\r\n\t\t\t\t/>\r\n\t\t\t\t<br />\r\n\r\n\t\t\t\t<Button\r\n\t\t\t\t\tvariant='outlined'\r\n\t\t\t\t\tsize='large'\r\n\t\t\t\t\tcolor='primary'\r\n\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\tdispatch(\r\n\t\t\t\t\t\t\tchange_state({\r\n\t\t\t\t\t\t\t\tpomodoroInterval,\r\n\t\t\t\t\t\t\t\tlongBrake,\r\n\t\t\t\t\t\t\t\tshortBrake,\r\n\t\t\t\t\t\t\t\tpomodoros,\r\n\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\tsetSettings(false)\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\tAll ok\r\n\t\t\t\t</Button>\r\n\t\t\t</Settings>\r\n\r\n\t\t\t<Info active={info} onChange={onInfo}>\r\n\t\t\t\t<h2>About Pomodoro Technique</h2>\r\n\t\t\t\tLorem ipsum dolor sit, amet consectetur adipisicing elit. Nihil\r\n\t\t\t\tlabore sit quas nam repellat perspiciatis autem, distinctio\r\n\t\t\t\tsuscipit ex, quae in fuga?\r\n\t\t\t\t<h2>Use Experience</h2>\r\n\t\t\t\tLorem ipsum dolor sit amet consectetur adipisicing elit.\r\n\t\t\t\tReiciendis aliquid cupiditate fugiat velit? Quam explicabo\r\n\t\t\t\tconsequuntur, odio non qui recusandae vitae dolore nam odit eius\r\n\t\t\t\tmaxime maiores voluptate quaerat provident?\r\n\t\t\t\t<br />\r\n\t\t\t\t<br />\r\n\t\t\t\t<Button\r\n\t\t\t\t\tvariant='outlined'\r\n\t\t\t\t\tsize='large'\r\n\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\tsetInfo(false)\r\n\t\t\t\t\t\tsetPomodoro(1)\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\tClose\r\n\t\t\t\t</Button>\r\n\t\t\t</Info>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Timer\r\n","export const CHANGE_STATE = 'CHANGE_STATE'\r\n\r\nexport const change_state = (obj) => ({\r\n    type: CHANGE_STATE,\r\n    obj\r\n})","import React from 'react'\r\nimport './App.css'\r\nimport Timer from './components/Timer/index'\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<div className='App'>\r\n\t\t\t<Timer />\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { CHANGE_STATE } from './action'\r\n\r\nconst localPomodorState = JSON.parse(localStorage.getItem('pomodorState'))\r\n\r\nconst initialState = {\r\n\tworkTime: 25,\r\n\tshortBreak: 5,\r\n\tlongBreak: 10,\r\n\tpomodoros: 4,\r\n}\r\n\r\nexport const rootReducer = (\r\n\tstate = localPomodorState ? localPomodorState : initialState,\r\n\taction,\r\n) => {\r\n\tswitch (action.type) {\r\n\t\tcase CHANGE_STATE:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tworkTime: parseInt(action.obj.pomodoroInterval),\r\n\t\t\t\tshortBreak: parseInt(action.obj.shortBrake),\r\n\t\t\t\tlongBreak: parseInt(action.obj.longBrake),\r\n\t\t\t\tpomodoros: parseInt(action.obj.pomodoros),\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport { rootReducer } from './store/reducer'\r\nimport { createStore } from 'redux'\r\nimport { Provider } from 'react-redux'\r\n\r\nconst store = createStore(rootReducer)\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<App />\r\n\t</Provider>,\r\n\tdocument.getElementById('root'),\r\n)\r\n\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}